---
title: "Exam R Elective"
author: "Sören Michallek"
date: "`r format(Sys.time(), '%B %Y')`"
output:
  prettydoc::html_pretty:
    theme: cayman
    highlight: github
    toc: TRUE
---
*************

```{r setup, include=FALSE, message = FALSE}
library(gridExtra)
library(ISLR)
library(tidyverse)
library(zoo)
```

# 1 Instructions

Hand in an Rmd file that reproduces this HTML. Make sure that:

* you fill in your name as author in the YAML

* all R code is visible and according to the style guide

* The R code is efficient (i.e. no unnecessary intermediate objects)

* R output is shown only if requested (e.g. by “Display …”)

* R messages are suppressed in the global chunk options

* plots are displayed in a proper height/width ratio

* avoid making unnecessary intermediate variables/objects

When finished, submit your Rmd file to Blackboard **before the deadline of 11:30**!. After the deadline, submission is no longer possible. You have three attempts, so make sure that you submit at least one version before the deadline. The last version is graded.

Good luck!!!

*************

# 2 Data generation (4)

a. Make the data frame `A` including the numeric variable `id` with the odd numbers from 1 to 19, and the factor `sex` with five time the value “f” and followed by five times the value “m”. (1 point)

```{r}
A <- data.frame(id = seq(1, 19, 2),
                sex = factor(c(rep("f", 5), rep("m", 5))))
```


b. Set the seed to 1, and make the data frame `B` with the numeric variable `id` consisting of a random sample of 10 **different** numbers drawn from the numbers 1 to 19, and the variable `age` consisting of ten random numbers drawn from the numbers 20 to 24. (1 point)

```{r}
set.seed(1)
B <- data.frame(id = sample(1:19, 10, replace = T),
             	  age =  sample(20:24, 10, replace = T))
```


c. Display a data frame with the variables `id`, `sex` and `age` by joining `A` and `B` in such a way that all `id`’s in `A` are included and all `id`’s in `B` that are not in `A` are excluded. (1 point)

```{r}
left_join(A, B)
```


d. Display a list with the elements “vector” containing the `id` variable of `B`, “factor” the variable `age` of `B`, and “myname” containing your first name. (1 point)

```{r}
list(vector = A$id,
          	factor = B$age,
          	"my name"= "Soeren")
```

**************

# 3 Data exploration (3)

Use the `Hitters` data from the ISLR package fFor the following questions, they are all about 
```{r echo = FALSE, fig.margin = TRUE, out.width = "10%"}
knitr::include_graphics("baseball.png")
```



a. Display the classes of the variables in `Hitters` as a vector. (1 point)

```{r}
unlist(lapply(Hitters, class))
```


b. Display the name of the player with the highest `Salary`

```{r}
Hitters %>% 
  top_n(1, Salary)
```


c. Display the row numbers of the cases with missing values. (1 point)

```{r}
row_number(which(is.na(Hitters)))
```

**************

# 4 Data manipulation (4 points)

a. Display a selection of the variables with a capital “R” in their name and all variables of class `factor` as a tibble. (2 points)

```{r}
Hitters %>% 
  select(contains("R") | where(~ class(.) == 'factor')) %>% 
  as_tibble()
```


b. Display the average number of `Runs` and `HmRun` per `Hits` (without saving any intermediate objects). (1 point)

```{r}
Hitters %>% 
group_by(Hits) %>% summarize(runs_mean = mean(Runs),
                             hmrun_mean = mean(HmRun))
```


c. Replace the missing values of the variable `Salary` by its mean, and add it as the variable `Salary_complete` to the `Hitters` data. (1 point)

```{r}
Hitters$Salary_complete <- na.aggregate(Hitters$Salary)
```


# 5 Data visualization (6 points)

Use the `ggplot()` function to make the plots.

a. In a 1 x 2 plot array, display two plots showing the frequencies of the combinations of the levels of `League` and `NewLeague`. Use a different geom for each plot (adjust the height:width ratio if necessary). (2 points)

```{r fig.height = 4, fig.width = 6}
grid.arrange(ggplot(Hitters, aes(League, NewLeague)) +
 geom_jitter(),

ggplot(Hitters, aes(League, NewLeague)) +
 geom_count(),
nrow = 1)
```


b. Display a scatter plot with `Hits` on the x-axis and `Walks` on the y-axis. Add a linear regression line (no confidence band), make the points transparent and give theme sizes proportional to the number of homeruns in `HmRun`. Use the “minimal” theme. (2 points)

```{r fig.height = 4, fig.width = 6}
ggplot(Hitters, aes(Hits, Walks)) +
  geom_point(alpha = .2, mapping = aes(size = HmRun)) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal()
```


c. In a 2 x 2 array, display the smooth regression lines without confidence bands for the 4 combinations of the levels of `League` and `Division` (one plot for each combination). (2 points)

```{r fig.height = 4, fig.width = 6}

    
# p <-  ggplot(Hitters, mapping = aes(League)) +
   # geom_smooth(method = "lm", se = FALSE)

#p + facet_grid(rows = Division)

```


# 6 Linear Model (6 points)

a. Fit a linear model that predicts `Salary` from (the number of) `Hits`, and display its summary. (1 point)

```{r}
lm <- lm(Hitters$Salary ~ Hitters$Hits)
summary(lm)
```


b. Display the residual plots of this model in a 2 x 2 plot array (in an acceptable height:width ratio). (1 point)

```{r}
par(mfrow = c(2, 2))
plot(lm)
```


c. For each plot, briefly which assumption of the linear model is depicted, and whether it is violated or not. (2 points)

* **Residuals vs Fitted**: …
tests linearity. The red line is not at 0. The assumption of linearity is violated.

* **Normal Q-Q**: …
tests normality, the points do not fall on the straight line. The assumption of normality is violated.
* **Scale-Location**: …
tests homoscedasticity. Variance does not seem to be evenly distributed.
* **Residuals vs Leverage**: …
tests for outliers. The values do not approach the critical values of cooks distance, therefore outliers are ok.

d. Improve the residuals plots by removing highly influential data points and applying data transformations and/or polynomials/splines. If you are reasonably satisfied, display the residual plots of the adjusted model. (2 points)

```{r}
hitters_2 <- Hitters[-c(218, 296), ]
lm_2 <- lm(log(hitters_2$Salary) ~ log(hitters_2$Hits))
par(mfrow = c(2, 2))
plot(lm_2)
```

*******

END OF EXAM

Submit your Rmd file to Blackboard before 11:30!


